" Automatic installation of vim-plug
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Vim-plug
call plug#begin('~/.vim/plugged')
Plug 'junegunn/vim-plug'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-unimpaired'
Plug 'dnguyen85/vim-latex'
Plug 'dnguyen85/vimwiki'
Plug 'majutsushi/tagbar'
Plug 'davidhalter/jedi-vim'
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'zchee/deoplete-jedi'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'jiangmiao/auto-pairs'
Plug 'altercation/vim-colors-solarized'
Plug 'vim-scripts/EnhCommentify.vim'
call plug#end()

" Set python provider
let g:python3_host_prog = '~/python_envs/neovim/bin/python3'

" Escape insert mode
imap jk <Esc>

" Colorscheme
set background=dark
colorscheme solarized
call togglebg#map("")

" Be iMproved, not compatible w/ vi
set nocompatible 
syntax enable
syntax on

filetype plugin on
filetype indent on

set autoindent
set smartindent
set ignorecase
set smartcase

" Clear highlighting on escape in normal mode
nnoremap <silent><esc> :noh<return><esc>
" nnoremap <esc> <esc>

" Matchit is a plugin for vim, but is built-in for neovim - activate it
runtime macros/matchit.vim

" Disable smartindent in python file. Don't need the auto indenting after '{'
au! FileType python setl nosmartindent 

" Python set tab attributes
autocmd Filetype python setlocal expandtab tabstop=4 shiftwidth=4 softtabstop=4

" Set font for term and gui
if has("gui_running")
    set guifont=DejaVu\ Sans\ Mono\ for\ Powerline\ 10 
endif

" Space to toggle folds
nnoremap <silent> <Space> @=(foldlevel('.')?'za':'l')<CR>

" Tabs are 4 spaces
set tabstop=4
set shiftwidth=4
set expandtab
set smarttab
set modeline

" Search options
set showmatch
" set hlsearch
set incsearch
" Line numbers on the left
set nu
" Set scroll
set scrolloff=3

" Line wrapping
set textwidth=80

" Text should be wrap if too long
set wrap

" Syntax highlight tabs as error
au BufRead,BufNewFile * syn match TAB_CHAR "\t"

" Spell checking
set spelllang=en_us
autocmd FileType gitcommit,tex,pandoc,markdown,mail setlocal spell

" Latex Processing
" IMPORTANT: grep will sometimes skip displaying the file name if you
" search in a singe file. This will confuse Latex-Suite. Set your grep
" program to always generate a file-name.
set grepprg=grep\ -nH\ $*
" OPTIONAL: Starting with Vim 7, the filetype of empty .tex files defaults to
" 'plaintex' instead of 'tex', which results in vim-latex not being loaded.
" The following changes the default filetype back to 'tex':
let g:tex_flavor='latex'
" Don't use Makefile in the project, even if exists
let g:Tex_UseMakefile = 0
" Viewing rules
let g:Tex_ViewRule_dvi='okular --unique'
let g:Tex_ViewRule_pdf='okular --unique'

" For pdf as default compilation, otherwise, use :TCTarget pdf to change on the fly
let g:Tex_DefaultTargetFormat='pdf'

" Critical for compiling w/ bibtex for pdflatex
"" Use arara instead of the below
" let g:Tex_BibtexFlavor = 'biber'

" pdftex flow rule
" let g:Tex_MultipleCompileFormats='pdf,dvi'
" let g:Tex_CompileRule_dvi = 'latex -shell-escape -synctex=1 -src-specials -interaction=nonstopmode $*'
" let g:Tex_CompileRule_ps = 'dvips -Ppdf -R0 -o $*.ps $*.dvi'
" let g:Tex_CompileRule_pdf = 'ps2pdf $*.ps'
" let g:Tex_FormatDependency_pdf = 'dvi,ps,pdf'

" pdflatex rule
" let g:Tex_CompileRule_pdf = 'pdflatex -shell-escape -synctex=1 -src-specials -interaction=nonstopmode $*'

" arara rule
let g:Tex_CompileRule_pdf = 'arara -v $*'

let g:Tex_Leader = ','
let g:Tex_GotoError=0
" Use symbol math
let g:Tex_UseUtfMenus = 1
let g:Tex_IgnoredWarnings = 
           \"Underfull\n".
           \"Overfull\n".
           \"specifier changed to\n".
           \"You have requested\n".
           \"Missing number, treated as zero.\n".
           \"There were undefined references\n".
           \"Citation %.%# undefined\n".
           \"Reference %.%# undefined\n".
           \"Latex Font Warning:"
" Increase the number of warnings ignored
let g:Tex_IgnoreLevel = 9

function! SyncTexForward()
let s:syncfile = fnamemodify(fnameescape(Tex_GetMainFileName()), ":r").".pdf"
let execstr = "silent !okular --unique ".s:syncfile."\\#src:".line(".").expand("%\:p").' &'
exec execstr
endfunction
nnoremap <leader>lf :call SyncTexForward()<CR>

" Latex paragraph map
omap lp ?^$\\|^\s*\(\\begin\\|\\end\\|\\label\)?1<CR>//-1<CR>.

" Vimwiki 
let g:vimwiki_html_header_numbering_sym = '.'
let g:vimwiki_html_header_numbering = 4
let g:vimwiki_use_mouse = 1
let g:vimwiki_browsers=['google-chrome']
" Do not let WikiWord to be a link
let g:vimwiki_camel_case = 0
hi VimwikiHeader1 guifg=#FDF6E3
hi VimwikiHeader2 guifg=#CB4B16
hi VimwikiHeader3 guifg=#2AA198
hi VimwikiHeader4 guifg=#B58900
hi VimwikiHeader5 guifg=#268BD2
hi VimwikiHeader6 guifg=#FDF6E3
let g:vimwiki_hl_headers = 1

" List of wikis
let wiki_1 = {}
let wiki_1.path = '~/Dropbox/www/wiki_files/'
let wiki_1.path_html = '~/Dropbox/www/wiki/'
let wiki_1.auto_export = 0
let wiki_1.template_path = '~/Dropbox/www/wiki_assets/'
let wiki_1.template_default = 'template'
let wiki_1.nested_syntaxes = {'python': 'python', 'c++': 'cpp', 'c': 'cpp', 'css': 'css', 'js': 'javascript', 'javascript': 'javascript', 'html': 'html', 'matlab': 'matlab'}

let wiki_2 = {}
let wiki_2.index = 'Nguyen - index - 2015'
let wiki_2.path = '~/Dropbox/Papers/'
let wiki_2.path_html = '~/Dropbox/Papers/'
" let wiki_2.ext = '.wiki'
let wiki_2.auto_export = 0
let wiki_2.template_path = '~/Dropbox/wiki_assets/'
let wiki_2.template_default = 'template'
let wiki_2.nested_syntaxes = {'python': 'python', 'c++': 'cpp', 'c': 'cpp', 'css': 'css', 'js': 'javascript', 'javascript': 'javascript', 'html': 'html', 'matlab': 'matlab'}

let g:vimwiki_list = [wiki_1, wiki_2]

" Remap find previous link on current page
map <leader>wb :VimwikiAll2HTML<CR><CR>

" Map <F3> to insert time stamp in insert mode
inoremap <F3> <C-R>=strftime("(%H:%M) ")<CR>
" Map <F4> to insert Date stamp in insert mode
inoremap <F4> <C-R>=strftime("==== %m/%d/%Y ====\n")<CR>
" Map <F6> to insert images string in insert mode
inoremap <F6> <C-R>=strftime("files/%Y_%m_%d_img")<CR>

" Map leader
let mapleader = ","

" Map for cut and paste
" Use C-Q to do what C-V normally do. Note: no recursive map here
noremap <C-Q> <C-V>
" Map C-V recursively
map <C-V> "+gP
cmap <C-V> <C-R>+
vnoremap <C-X> "+x
vnoremap <C-C> "+y

" Do not use bash ctrl-j
let g:BASH_Ctrl_j='off'
let g:C_Ctrl_j='off'
nnoremap <C-j>     <C-W>j
nnoremap <C-k>     <C-W>k
nnoremap <C-h>     <C-W>h
nnoremap <C-l>     <C-W>l

"" Fugitive plugin
cnoreabbrev Gs Gstatus
if has("autocmd")
    autocmd BufReadPost fugitive://* set bufhidden=delete
endif

" EnhancedCommentify plugin
let g:EnhCommentifyRespectIndent = 'yes'
let g:EnhCommentifyPretty = 'yes'
let g:EnhCommentifyAlignRight = 'yes'
let g:EnhCommentifyUseAltKeys = 'no'
let g:EnhCommentifyUseBlockIndent = 'yes'

" Vim-arline
let g:airline_powerline_fonts = 1
let g:airline_solarized_bg = 'dark'
" Enable tab line
let g:airline#extensions#tabline#enabled = 1
" Set the tab number to show actual number, instead of # of splits
let g:airline#extensions#tabline#tab_nr_type = 1 " tab number
" Hide the tab type
let g:airline#extensions#tabline#show_tab_type = 0
" Format buffer filenames
let g:airline#extensions#tabline#fnamemod = ':t'
" Show the buffer number
let g:airline#extensions#tabline#buffer_nr_show = 1
" Eliminate the space between buffer number
let g:airline#extensions#tabline#buffer_nr_format = '%s:'
" Collapse path for long filename
let g:airline#extensions#tabline#fnamecollapse=1
" Set min buffers to start showing tabline
let g:airline#extensions#tabline#buffer_min_count = 2
" Use the `unique_tail` (or `unique_tail_improved` algorithm to display buffer
let g:airline#extensions#tabline#formatter = 'unique_tail_improved'
" Configure symbols
let g:airline_symbols = get(g:,'airline_symbols',{})
let g:airline_symbols.maxlinenr= ''

" Map for tab close
nmap gc :tabclose<CR>
nmap gn :tabnew<CR>

" Use mouse in terminal vim
set mouse=a



