" Automatic installation of vim-plug
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Vim-plug
" Helper function for conditional loading while making sure plugins are registered with Vim-plug
function! Cond(cond, ...)
  let opts = get(a:000, 0, {})
  return a:cond ? opts : extend(opts, { 'on': [], 'for': [] })
endfunction

call plug#begin('~/.vim/plugged')
Plug 'junegunn/vim-plug'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-abolish'
Plug 'gregsexton/gitv'
Plug 'majutsushi/tagbar'
Plug 'tpope/vim-unimpaired'
Plug 'jpalardy/vim-slime'
Plug 'scrooloose/nerdtree'
Plug 'dnguyen85/vimoutliner'
Plug 'sjl/splice.vim'
Plug 'rickhowe/diffchar.vim'
Plug 'will133/vim-dirdiff'
Plug 'qpkorr/vim-bufkill'
Plug 'tpope/vim-unimpaired'
Plug 'dnguyen85/vim-latex'
Plug 'dnguyen85/vimwiki'
Plug 'davidhalter/jedi-vim', { 'for': ['python'] }
Plug 'zchee/deoplete-jedi', { 'for': ['python'] }
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'jiangmiao/auto-pairs', { 'for': ['python', 'c', 'c++', 'matlab', 'vim'] }
Plug 'dnguyen85/vim-colors-solarized'
Plug 'vim-scripts/EnhCommentify.vim'
Plug 'Shougo/denite.nvim', {'do': ':UpdateRemotePlugins'}
Plug 'tpope/vim-dispatch'
Plug 'joonty/vdebug', { 'for': ['python'] }
Plug 'wincent/loupe'
Plug 'mileszs/ack.vim'
Plug 'autozimu/LanguageClient-neovim', { 'branch': 'next', 'do': 'bash install.sh' }
Plug 'Shougo/neco-syntax'               " For syntax completion
Plug 'Shougo/neoinclude.vim'            " For include completion
Plug 'Shougo/neosnippet.vim'
Plug 'sjl/splice.vim'                   " For git merge 
Plug 'sk1418/QFGrep'
Plug 'honza/vim-snippets'
Plug 'dnguyen85/vim-indent-guides', { 'for': 'python' }
Plug 'jeetsukumaran/vim-indentwise'
Plug 'vimoutliner/vimoutliner'
Plug 'juneedahamed/vc.vim'
Plug 'ncm2/float-preview.nvim'
Plug 'othree/xml.vim'
Plug 'Konfekt/FastFold'
Plug 'https://github.qualcomm.com/kting/vim-perforce'

if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif
call plug#end()

" Set python provider with neovim python packages
if has("mac")
    let g:python3_host_prog = '/usr/local/bin/python3'
elseif has("win32")
    let g:python3_host_prog = 'C:\Python38\python.exe'
else
    let g:python3_host_prog = '~/python_envs/3.6.4/bin/python3'
endif

" Escape insert mode
imap jk <Esc>

" Be iMproved, not compatible w/ vi
set nocompatible 
syntax enable
syntax on

filetype plugin on
filetype indent on

set autoindent
set smartindent
set ignorecase
set smartcase

" Colorscheme
set background=dark
colorscheme solarized
call togglebg#map("")


" Clear highlighting on escape in normal mode (Option 1)
" nnoremap <silent><esc> :let @/=""<return><esc>

" Clear highlighting on escape in normal mode (option 2)
nnoremap <silent> <esc> :noh<return><esc>
" Needed to make terminal vim work ok when remapping Esc
" nnoremap <esc>^[ <esc>^[ 

" Matchit is a plugin for vim, but is built-in for neovim - activate it
runtime macros/matchit.vim

" Disable smartindent in python file. Don't need the auto indenting after '{'
au! FileType python setl nosmartindent 

" Python set tab attributes
autocmd Filetype python setlocal expandtab tabstop=4 shiftwidth=4 softtabstop=4

" Space to toggle folds
nnoremap <silent> <Space> @=(foldlevel('.')?'za':'l')<CR>

" Tabs are 4 spaces
set tabstop=4
set shiftwidth=4
set expandtab
set smarttab
set modeline

" Search options
set showmatch
" set hlsearch
set incsearch
" Line numbers on the left
set nu
" Set scroll
set scrolloff=3

" Line wrapping
set textwidth=80

" Text should be wrap if too long
set wrap

" Syntax highlight tabs as error
" au BufRead,BufNewFile * syn match TAB_CHAR "\t"

" Spell checking
set spelllang=en_us
autocmd FileType gitcommit,pandoc,markdown,mail setlocal spell

"## Diffmode settings using 'au FilterWritePre * if &diff'
set diffopt=filler,context:1000,iwhite

" NERD Tree plugin
map <F12> :NERDTreeToggle<CR>

"" Folding
nnoremap zk zk[z
" Open file at highest foldlevel
autocmd BufWinEnter *.py,*.m,*.md,*.otl let &foldlevel = max(map(range(1, line('$')), 'foldlevel(v:val)'))

" Run Make with F5/F6
nnoremap <localleader>M :Make<CR>               " Wrapper to call Make
nnoremap <localleader>d :Dispatch make<CR>      " Call the makeprg

" Latex Processing
" IMPORTANT: grep will sometimes skip displaying the file name if you
" search in a singe file. This will confuse Latex-Suite. Set your grep
" program to always generate a file-name.
set grepprg=grep\ -nH\ $*
" OPTIONAL: Starting with Vim 7, the filetype of empty .tex files defaults to
" 'plaintex' instead of 'tex', which results in vim-latex not being loaded.
" The following changes the default filetype back to 'tex':
let g:tex_flavor='latex'
" Don't use Makefile in the project, even if exists
let g:Tex_UseMakefile = 0
" Viewing rules
let g:Tex_ViewRule_dvi='okular --unique'
let g:Tex_ViewRule_pdf='okular --unique'

" For pdf as default compilation, otherwise, use :TCTarget pdf to change on the fly
let g:Tex_DefaultTargetFormat='pdf'

" Critical for compiling w/ bibtex for pdflatex
"" Use arara instead of the below
" let g:Tex_BibtexFlavor = 'biber'

" pdftex flow rule
" let g:Tex_MultipleCompileFormats='pdf,dvi'
" let g:Tex_CompileRule_dvi = 'latex -shell-escape -synctex=1 -src-specials -interaction=nonstopmode $*'
" let g:Tex_CompileRule_ps = 'dvips -Ppdf -R0 -o $*.ps $*.dvi'
" let g:Tex_CompileRule_pdf = 'ps2pdf $*.ps'
" let g:Tex_FormatDependency_pdf = 'dvi,ps,pdf'

" pdflatex rule
" let g:Tex_CompileRule_pdf = 'pdflatex -shell-escape -synctex=1 -src-specials -interaction=nonstopmode $*'

" arara rule
let g:Tex_CompileRule_pdf = 'arara -v $*'

let g:Tex_Leader = ','
let g:Tex_GotoError=0
" Use symbol math
let g:Tex_UseUtfMenus = 1
let g:Tex_IgnoredWarnings = 
           \"Underfull\n".
           \"Overfull\n".
           \"specifier changed to\n".
           \"You have requested\n".
           \"Missing number, treated as zero.\n".
           \"There were undefined references\n".
           \"Citation %.%# undefined\n".
           \"Reference %.%# undefined\n".
           \"Latex Font Warning:"
" Increase the number of warnings ignored
let g:Tex_IgnoreLevel = 9

function! SyncTexForward()
let s:syncfile = fnamemodify(fnameescape(Tex_GetMainFileName()), ":r").".pdf"
let execstr = "silent !okular --unique ".s:syncfile."\\#src:".line(".").expand("%\:p").' &'
exec execstr
endfunction
nnoremap <leader>lf :call SyncTexForward()<CR>

" Latex paragraph map
omap lp ?^$\\|^\s*\(\\begin\\|\\end\\|\\label\)?1<CR>//-1<CR>.

" Vimwiki 
let g:vimwiki_html_header_numbering_sym = '.'
let g:vimwiki_html_header_numbering = 4
let g:vimwiki_use_mouse = 1
" Set browser
if has("mac")
    let g:vimwiki_browsers=['/Applications/Google Chrome.app/Contents/MacOS/Google Chrome']
elseif has("win32")
    let g:vimwiki_browsers=['C:\Program Files\Mozilla Firefox\firefox.exe']
else
    let g:vimwiki_browsers=['google-chrome']
endif

" Do not let WikiWord to be a link
let g:vimwiki_camel_case = 0
let g:vimwiki_hl_headers = 1

" List of wikis
let wiki_1 = {}
let wiki_1.path = '~/Dropbox/www/wiki_files/'
let wiki_1.path_html = '~/Dropbox/www/wiki/'
let wiki_1.auto_export = 0
let wiki_1.template_path = '~/Dropbox/www/wiki_assets/'
let wiki_1.template_default = 'template'
let wiki_1.nested_syntaxes = {'python': 'python', 'c++': 'cpp', 'c': 'cpp', 'css': 'css', 'js': 'javascript', 'javascript': 'javascript', 'html': 'html', 'matlab': 'matlab'}

let wiki_2 = {}
let wiki_2.index = 'Nguyen - index - 2015'
let wiki_2.path = '~/Dropbox/Papers/'
let wiki_2.path_html = '~/Dropbox/Papers/'
" let wiki_2.ext = '.wiki'
let wiki_2.auto_export = 0
let wiki_2.template_path = '~/Dropbox/wiki_assets/'
let wiki_2.template_default = 'template'
let wiki_2.nested_syntaxes = {'python': 'python', 'c++': 'cpp', 'c': 'cpp', 'css': 'css', 'js': 'javascript', 'javascript': 'javascript', 'html': 'html', 'matlab': 'matlab'}

let g:vimwiki_list = [wiki_1, wiki_2]

" Remap find previous link on current page
map <leader>wb :VimwikiAll2HTML<CR><CR>

" Map <F3> to insert time stamp in insert mode
inoremap <F3> <C-R>=strftime("(%H:%M) ")<CR>
" Map <F4> to insert Date stamp in insert mode
inoremap <F4> <C-R>=strftime("==== %m/%d/%Y ====\n")<CR>
" Map <F6> to insert images string in insert mode
inoremap <F6> <C-R>=strftime("files/%Y_%m_%d_img")<CR>

" Map leader
let mapleader = ","

" Do not auto-resize when split closes
set noea

" Map for cut and paste
" Use C-Q to do what C-V normally do. Note: no recursive map here
noremap <C-Q> <C-V>
" Map C-V recursively
map <C-V> "+gP
cmap <C-V> <C-R>+
vnoremap <C-X> "+x
vnoremap <C-C> "+y

" Do not use bash ctrl-j
let g:BASH_Ctrl_j='off'
let g:C_Ctrl_j='off'
nnoremap <C-j>     <C-W>j
nnoremap <C-k>     <C-W>k
nnoremap <C-h>     <C-W>h
nnoremap <C-l>     <C-W>l

" Show the stack of syntax hilighting classes affecting whatever is under the
" cursor.
function! SynStack()
    echo join(map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")'), " > ")
endfunc

""""""  Vertical split and open buffer 
function! VerticalSplitBuffer(buffer)
    execute "vert belowright sb" a:buffer 
endfunction

if !exists(":Vbuffer")
    command -nargs=1 Vbuffer call VerticalSplitBuffer(<f-args>)
endif


"" Fugitive plugin
cnoreabbrev Gs Gstatus
if has("autocmd")
    autocmd BufReadPost fugitive://* set bufhidden=delete
endif

" EnhancedCommentify plugin
let g:EnhCommentifyRespectIndent = 'yes'
let g:EnhCommentifyPretty = 'yes'
let g:EnhCommentifyAlignRight = 'yes'
let g:EnhCommentifyUseAltKeys = 'no'
let g:EnhCommentifyUseBlockIndent = 'yes'

" Vim-arline
let g:airline_powerline_fonts = 1
let g:airline_solarized_bg = 'dark'
" Enable tab line
let g:airline#extensions#tabline#enabled = 1
" Set the tab number to show actual number, instead of # of splits
let g:airline#extensions#tabline#tab_nr_type = 1 " tab number
" Hide the tab type
let g:airline#extensions#tabline#show_tab_type = 0
" Format buffer filenames
let g:airline#extensions#tabline#fnamemod = ':t'
" Show the buffer number
let g:airline#extensions#tabline#buffer_nr_show = 1
" Eliminate the space between buffer number
let g:airline#extensions#tabline#buffer_nr_format = '%s:'
" Collapse path for long filename
let g:airline#extensions#tabline#fnamecollapse=1
" Set min buffers to start showing tabline
let g:airline#extensions#tabline#buffer_min_count = 2
" Use the `unique_tail` (or `unique_tail_improved` algorithm to display buffer
let g:airline#extensions#tabline#formatter = 'unique_tail_improved'
" Configure symbols
let g:airline_symbols = get(g:,'airline_symbols',{})
let g:airline_symbols.maxlinenr= ''

" === Denite setup ==="
" Wrap in try/catch to avoid errors on initial install before plugin is available
try

"" Change file/rec command
call denite#custom#var('file/rec', 'command', ['ag', '--follow', '--nocolor', '--nogroup', '-u', '-g', ''])
call denite#custom#alias('source', 'file/rec/git', 'file/rec')
call denite#custom#var('file/rec/git', 'command', ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])

" Change matchers (optional)
" call denite#custom#source(
" \ 'file_mru', 'matchers', ['matcher/fuzzy', 'matcher/project_files'])
" call denite#custom#source(
" \ 'file/rec', 'matchers', ['matcher/cpsm'])

" Grep source filter by filename
call denite#custom#source('grep', 'converters', ['converter_abbr_word'])  

"" Mappings for Denite buffer actions
autocmd FileType denite call s:denite_my_settings()
function! s:denite_my_settings() abort
    " Window
    " setlocal signcolumn=no cursorline
    nnoremap <silent><buffer><expr> <CR>
        \ denite#do_map('do_action')
    nnoremap <silent><buffer><expr> d
       \ denite#do_map('do_action', 'delete')
    nnoremap <silent><buffer><expr> <C-v>
        \ denite#do_map('do_action', 'vsplit')
    nnoremap <silent><buffer><expr> <C-s>
        \ denite#do_map('do_action', 'split')
    nnoremap <silent><buffer><expr> <C-t>
        \ denite#do_map('do_action', 'tabswitch')
    nnoremap <silent><buffer><expr> p
        \ denite#do_map('do_action', 'preview')
    nnoremap <silent><buffer><expr> q
        \ denite#do_map('quit')
    nnoremap <silent><buffer><expr> i
        \ denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> <Space>
        \ denite#do_map('toggle_select').'j'
    nnoremap <silent><buffer><expr> <C-q>
        \ denite#do_map('do_action', 'quickfix')
    nnoremap <silent><buffer> <C-a>
        \ :<C-u>call <SID>denite_all_quickfix()<CR>
endfunction
function! s:denite_all_quickfix()
  call denite#call_map('toggle_select_all')
  call denite#call_map('do_action', 'quickfix')
endfunction

"" In filter mode and want to go back
autocmd FileType denite-filter call s:denite_filter_my_settings()
function! s:denite_filter_my_settings() abort
  imap <silent><buffer> <C-o> <Plug>(denite_filter_quit)
endfunction

"" Ag command on grep source
call denite#custom#var('grep', {
    \ 'command': ['ag'],
    \ 'default_opts': ['-i', '--vimgrep'],
    \ 'recursive_opts': [],
    \ 'pattern_opt': [],
    \ 'separator': ['--'],
    \ 'final_opts': [],
    \ })

" Change ignore_globs
call denite#custom#filter('matcher/ignore_globs', 'ignore_globs',
      \ [ '.git/', '.ropeproject/', '__pycache__/',
      \   'venv/', 'images/', '*.min.*', 'img/', 'fonts/'])

" Custom options for Denite
"   auto_resize             - Auto resize the Denite window height automatically.
"   prompt                  - Customize denite prompt
"   direction               - Specify Denite window direction as directly below current pane
"   winminheight            - Specify min height for Denite window
"   highlight_mode_insert   - Specify h1-CursorLine in insert mode
"   prompt_highlight        - Specify color of prompt
"   highlight_matched_char  - Matched characters highlight
"   highlight_matched_range - matched range highlight
" \ 'split': 'floating',    - Denite buffer to float
" \ 'winrow': 1,            - Pin to top
" \ 'auto_resize': 1,       
" \ 'source_names': 'short',
" \ 'highlight_matched_range': 'Visual',
" \ 'highlight_window_background': 'Visual',
" \ 'highlight_filter_background': 'DiffAdd',
" \ 'highlight_matched_char': 'Underlined',
" \ 'vertical_preview': 1
if has('nvim')
    let s:denite_options = {'default' : {
    \ 'prompt': 'λ ',
    \ 'source_names': 'short',
    \ 'split': 'floating',     
    \ 'auto_resize': 1,       
    \ 'vertical_preview': 1,
    \ 'floating_preview': 1,
    \ 'winrow': 1,             
    \ 'highlight_filter_background': 'DiffAdd',
    \ 'highlight_window_background': 'Visual',
    \ 'highlight_matched_char': 'Todo',
    \ 'highlight_matched_range': 'SpellBad'
    \ }}
else
    let s:denite_options = {'default' : {
    \ 'prompt': 'λ ',
    \ 'highlight_matched_char': 'Todo',
    \ 'highlight_matched_range': 'SpellBad',
    \ }}
endif


" Loop through denite options and enable them
function! s:profile(opts) abort
  for l:fname in keys(a:opts)
    for l:dopt in keys(a:opts[l:fname])
      call denite#custom#option(l:fname, l:dopt, a:opts[l:fname][l:dopt])
    endfor
  endfor
endfunction

call s:profile(s:denite_options)
catch
  echo 'Denite not installed. It should work after running :PlugInstall'
endtry

" Denite Mappings
nnoremap <C-p> :Denite file/rec/git -start-filter<CR>  
nnoremap <C-t> :Denite file/rec -start-filter<CR>  
nnoremap <leader>db :Denite buffer<CR>
nnoremap <leader>d* :DeniteCursorWord grep:.<CR>
nnoremap <leader>d8 :DeniteCursorWord grep:<C-r>%:'--column'<CR>
nnoremap <leader>d/ :Denite grep:.<CR>
nnoremap <leader>d. :Denite -start-filter grep:::!<CR>
nnoremap <leader>d> :Denite -start-filter grep:<C-r>%:'--column':!<CR> 
nnoremap <leader>dB :DeniteBufferDir file/rec -start-filter<CR>
nnoremap <leader>dr :Denite -resume -cursor-pos=+1<CR>
nnoremap <leader>d<C-r> :Denite register:.<CR>


" Map for tab close
nmap gc :tabclose<CR>
nmap gn :tabnew<CR>
" Go to last active tab
au TabLeave * let g:lasttab = tabpagenr()
nnoremap <silent> gl :exe "tabn ".g:lasttab<cr>

" Gitv plugin
nmap <leader>gv :Gitv --all<cr>
nmap <leader>gV :Gitv! --all<cr>
vmap <leader>gV :Gitv! --all<cr>
let g:Gitv_DoNotMapCtrlKey = 1
" Remap back some ctrl key
au FileType gitv nmap <buffer> <silent> J <Plug>(gitv-previous-commit)
au FileType gitv nmap <buffer> <silent> K <Plug>(gitv-next-commit)

""" Autopairs """
let g:AutoPairsShortcutJump = '<C-g>' 
" Do not map <BS> and <C-h>, will interfere w/ NeoComplete
let g:AutoPairsMapBS = 0 
let g:AutoPairsMapCh = 0

" Tagbar setup
nnoremap <silent> <F11> :TagbarToggle<CR> 
nnoremap <silent> <leader>t :TagbarOpen fj<CR> 
let g:tagbar_indent = 1
let g:tagbar_type_xml = {
    \ 'ctagstype' : 'xml',
    \ 'kinds'     : [
        \ 'i:id'
    \ ]
\ }

let g:tagbar_type_xsd = {
    \ 'ctagstype' : 'XSD',
    \ 'kinds'     : [
        \ 'e:elements',
        \ 'c:complexTypes',
        \ 's:simpleTypes'
    \ ]
\ }

""" XML folding
let g:xml_syntax_folding=1
au FileType xml setlocal foldmethod=syntax


""" Neosnippet plugin
" C-k to select-and-expand a snippet from Neocomplcache popup (Use C-n and C-p
" to select), C-k also jumps to next field in snippet
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" FAQ for auto-complete w/ function parameters from clang-complete
let g:neosnippet#enable_completed_snippet = 1
let g:neosnippet#enable_complete_done = 1

" For snippet_complete marker.
" if has('conceal')
  " set conceallevel=2 concealcursor=niv
" endif

" Use Honza's snippets
let g:neosnippet#enable_snipmate_compatibility = 1
let g:neosnippet#snippets_directory='~/.vim/plugged/vim-snippets/snippets, ~/.vim/my_snippets'

""""""""""""""""""""""""""" Deoplete Setting Starts """"""""""""""""""""""
" deoplete jedi
let g:deoplete#sources#jedi#show_docstring = 1

""""""""""""""""""""""""""" Language client """"""""""""""""""""""""""""""
let g:LanguageClient_serverCommands = {'cpp': ['clangd', '--header-insertion=never', '--pch-storage=memory', '-background-index',],}

" Automatically start language servers
let g:LanguageClient_autoStart = 1 
" let g:LanguageClient_loggingFile = expand('~/.languageclient')
" let g:LanguageClient_loggingLevel = 'DEBUG'
let g:LanguageClient_serverStderr = '/tmp/clangd.stderr'
let g:LanguageClient_diagnosticMaxSeverity = "Error"
let g:LanguageClient_diagnosticsList = "Location"
let g:LanguageClient_virtualTextPrefix = "•••➜"
" let g:LanguageClient_diagnosticsSignsMax = 0 - Disable the gutter sign

function SetupCpp()
  nnoremap <leader>ld :call LanguageClient#textDocument_definition()<CR>
  nnoremap <leader>lr :call LanguageClient#textDocument_rename()<CR>
  nnoremap <leader>lf :call LanguageClient#textDocument_formatting()<CR>
  nnoremap <leader>lt :call LanguageClient#textDocument_typeDefinition()<CR>
  nnoremap <leader>lx :call LanguageClient#textDocument_references()<CR>
  nnoremap <leader>la :call LanguageClient_workspace_applyEdit()<CR>
  nnoremap <leader>lc :call LanguageClient#textDocument_completion()<CR>
  nnoremap K :call LanguageClient#textDocument_hover()<CR>
  nnoremap <leader>ls :call LanguageClient_textDocument_documentSymbol()<CR>
  nnoremap <leader>lm :call LanguageClient_contextMenu()<CR>
  nnoremap <leader>ldv :call LanguageClient#textDocument_definition({'gotoCmd': 'vs'})<CR>
  nnoremap <leader>lds :call LanguageClient#textDocument_definition({'gotoCmd': 'split'})<CR>
  nnoremap <leader>ldt :call LanguageClient#textDocument_definition({'gotoCmd': 'tabedit'})<CR>
  call deoplete#enable()
  packadd termdebug
endfunction()

augroup LSP
  autocmd!
  autocmd FileType cpp,c call SetupCpp()
augroup END

" Rename - rc => rename camelCase
nnoremap <leader>lrc :call LanguageClient#textDocument_rename(
            \ {'newName': Abolish.camelcase(expand('<cword>'))})<CR>
" Rename - rs => rename snake_case
nnoremap <leader>lrs :call LanguageClient#textDocument_rename(
            \ {'newName': Abolish.snakecase(expand('<cword>'))})<CR>
" Rename - ru => rename UPPERCASE
nnoremap <leader>lru :call LanguageClient#textDocument_rename(
            \ {'newName': Abolish.uppercase(expand('<cword>'))})<CR>

" Ack.vim
let g:ackprg = 'ag --vimgrep --column'
let g:ack_mappings = {
      \ "h": "",
      \ "H": "",
      \ "t": "",
      \ "s": "",
      \ "S": "",
      \ "v": "",
      \ "V": "",
      \ "<C-t>": "<C-W><CR><C-W>T",          
      \ "T": "<C-W><CR><C-W>TgT<C-W>j",        
      \ "o": "<CR>",
      \ "O": "<CR><C-W><C-W>:ccl<CR>",
      \ "go": "<CR><C-W>j",
      \ "<C-s>": "<C-W><CR><C-W>K",
      \ "gs": "<C-W><CR><C-W>K<C-W>b",
      \ "<C-v>": "<C-W><CR><C-W>H<C-W>b<C-W>J<C-W>t",
      \ "gv": "<C-W><CR><C-W>H<C-W>b<C-W>J" }
nnoremap <leader>* :Ack!"\b<cword>\b" <CR>
nnoremap <leader>8 :Ack!"\b<cword>\b" %<CR>

"## diffchar plugin - new plugin
let g:DiffPairVisible=2

"## DirDiff settings
" exclude folder and files
let g:DirDiffExcludes = ".git,*.swp,*~,~*,*.pyc"

" Don't flag files as different based on whitespace
let g:DirDiffAddArgs = "-w"
let g:DirDiffForceLang = ""         " Must set this to work in tcsh 
"## End DirDiff

" Slime.vim
let g:slime_target = "tmux"
let g:slime_python_ipython = 1

" Termdebug
let g:termdebug_wide = 1
au TermOpen * setlocal nonumber norelativenumber

" Use mouse in terminal vim
set mouse=a

