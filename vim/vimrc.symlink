" Automatic installation of vim-plug
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Vim-plug
" Helper function for conditional loading while making sure plugins are registered with Vim-plug
function! Cond(cond, ...)
  let opts = get(a:000, 0, {})
  return a:cond ? opts : extend(opts, { 'on': [], 'for': [] })
endfunction

call plug#begin('~/.vim/plugged')
Plug 'junegunn/vim-plug'
Plug 'tpope/vim-fugitive'
Plug 'gregsexton/gitv'
Plug 'majutsushi/tagbar'
Plug 'tpope/vim-unimpaired'
Plug 'jpalardy/vim-slime'
Plug 'scrooloose/nerdtree'
Plug 'dnguyen85/vimoutliner'
Plug 'sjl/splice.vim'
Plug 'rickhowe/diffchar.vim'
Plug 'will133/vim-dirdiff'
Plug 'qpkorr/vim-bufkill'
Plug 'tpope/vim-unimpaired'
Plug 'dnguyen85/vim-latex'
Plug 'dnguyen85/vimwiki'
Plug 'majutsushi/tagbar'
Plug 'davidhalter/jedi-vim'
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'zchee/deoplete-jedi'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'jiangmiao/auto-pairs', { 'for': ['python', 'c', 'c++', 'matlab', 'vim'] }
Plug 'altercation/vim-colors-solarized'
Plug 'vim-scripts/EnhCommentify.vim'
Plug 'Shougo/denite.nvim', {'do': ':UpdateRemotePlugins'}
Plug 'tpope/vim-dispatch'
Plug 'joonty/vdebug'
Plug 'wincent/loupe'
call plug#end()

" Set python provider with neovim python packages
if has("mac")
    let g:python3_host_prog = '/usr/local/bin/python3'
else
    let g:python3_host_prog = '~/python_envs/neovim/bin/python3'
endif

" Escape insert mode
imap jk <Esc>

" Be iMproved, not compatible w/ vi
set nocompatible 
syntax enable
syntax on

filetype plugin on
filetype indent on

set autoindent
set smartindent
set ignorecase
set smartcase

" Colorscheme
set background=dark
colorscheme solarized
call togglebg#map("")


" Clear highlighting on escape in normal mode
nnoremap <silent><esc> :let @/=""<return><esc>

" Matchit is a plugin for vim, but is built-in for neovim - activate it
runtime macros/matchit.vim

" Disable smartindent in python file. Don't need the auto indenting after '{'
au! FileType python setl nosmartindent 

" Python set tab attributes
autocmd Filetype python setlocal expandtab tabstop=4 shiftwidth=4 softtabstop=4

" Space to toggle folds
nnoremap <silent> <Space> @=(foldlevel('.')?'za':'l')<CR>

" Tabs are 4 spaces
set tabstop=4
set shiftwidth=4
set expandtab
set smarttab
set modeline

" Search options
set showmatch
" set hlsearch
set incsearch
" Line numbers on the left
set nu
" Set scroll
set scrolloff=3

" Line wrapping
set textwidth=80

" Text should be wrap if too long
set wrap

" Syntax highlight tabs as error
au BufRead,BufNewFile * syn match TAB_CHAR "\t"

" Spell checking
set spelllang=en_us
autocmd FileType gitcommit,pandoc,markdown,mail setlocal spell

" Latex Processing
" IMPORTANT: grep will sometimes skip displaying the file name if you
" search in a singe file. This will confuse Latex-Suite. Set your grep
" program to always generate a file-name.
set grepprg=grep\ -nH\ $*
" OPTIONAL: Starting with Vim 7, the filetype of empty .tex files defaults to
" 'plaintex' instead of 'tex', which results in vim-latex not being loaded.
" The following changes the default filetype back to 'tex':
let g:tex_flavor='latex'
" Don't use Makefile in the project, even if exists
let g:Tex_UseMakefile = 0
" Viewing rules
let g:Tex_ViewRule_dvi='okular --unique'
let g:Tex_ViewRule_pdf='okular --unique'

" For pdf as default compilation, otherwise, use :TCTarget pdf to change on the fly
let g:Tex_DefaultTargetFormat='pdf'

" Critical for compiling w/ bibtex for pdflatex
"" Use arara instead of the below
" let g:Tex_BibtexFlavor = 'biber'

" pdftex flow rule
" let g:Tex_MultipleCompileFormats='pdf,dvi'
" let g:Tex_CompileRule_dvi = 'latex -shell-escape -synctex=1 -src-specials -interaction=nonstopmode $*'
" let g:Tex_CompileRule_ps = 'dvips -Ppdf -R0 -o $*.ps $*.dvi'
" let g:Tex_CompileRule_pdf = 'ps2pdf $*.ps'
" let g:Tex_FormatDependency_pdf = 'dvi,ps,pdf'

" pdflatex rule
" let g:Tex_CompileRule_pdf = 'pdflatex -shell-escape -synctex=1 -src-specials -interaction=nonstopmode $*'

" arara rule
let g:Tex_CompileRule_pdf = 'arara -v $*'

let g:Tex_Leader = ','
let g:Tex_GotoError=0
" Use symbol math
let g:Tex_UseUtfMenus = 1
let g:Tex_IgnoredWarnings = 
           \"Underfull\n".
           \"Overfull\n".
           \"specifier changed to\n".
           \"You have requested\n".
           \"Missing number, treated as zero.\n".
           \"There were undefined references\n".
           \"Citation %.%# undefined\n".
           \"Reference %.%# undefined\n".
           \"Latex Font Warning:"
" Increase the number of warnings ignored
let g:Tex_IgnoreLevel = 9

function! SyncTexForward()
let s:syncfile = fnamemodify(fnameescape(Tex_GetMainFileName()), ":r").".pdf"
let execstr = "silent !okular --unique ".s:syncfile."\\#src:".line(".").expand("%\:p").' &'
exec execstr
endfunction
nnoremap <leader>lf :call SyncTexForward()<CR>

" Latex paragraph map
omap lp ?^$\\|^\s*\(\\begin\\|\\end\\|\\label\)?1<CR>//-1<CR>.

" Vimwiki 
let g:vimwiki_html_header_numbering_sym = '.'
let g:vimwiki_html_header_numbering = 4
let g:vimwiki_use_mouse = 1
" Set browser
if has("mac")
    let g:vimwiki_browsers=['/Applications/Google Chrome.app/Contents/MacOS/Google Chrome']
elseif
    let g:vimwiki_browsers=['google-chrome']
endif

" Do not let WikiWord to be a link
let g:vimwiki_camel_case = 0
let g:vimwiki_hl_headers = 1

" List of wikis
let wiki_1 = {}
let wiki_1.path = '~/Dropbox/www/wiki_files/'
let wiki_1.path_html = '~/Dropbox/www/wiki/'
let wiki_1.auto_export = 0
let wiki_1.template_path = '~/Dropbox/www/wiki_assets/'
let wiki_1.template_default = 'template'
let wiki_1.nested_syntaxes = {'python': 'python', 'c++': 'cpp', 'c': 'cpp', 'css': 'css', 'js': 'javascript', 'javascript': 'javascript', 'html': 'html', 'matlab': 'matlab'}

let wiki_2 = {}
let wiki_2.index = 'Nguyen - index - 2015'
let wiki_2.path = '~/Dropbox/Papers/'
let wiki_2.path_html = '~/Dropbox/Papers/'
" let wiki_2.ext = '.wiki'
let wiki_2.auto_export = 0
let wiki_2.template_path = '~/Dropbox/wiki_assets/'
let wiki_2.template_default = 'template'
let wiki_2.nested_syntaxes = {'python': 'python', 'c++': 'cpp', 'c': 'cpp', 'css': 'css', 'js': 'javascript', 'javascript': 'javascript', 'html': 'html', 'matlab': 'matlab'}

let g:vimwiki_list = [wiki_1, wiki_2]

" Remap find previous link on current page
map <leader>wb :VimwikiAll2HTML<CR><CR>

" Map <F3> to insert time stamp in insert mode
inoremap <F3> <C-R>=strftime("(%H:%M) ")<CR>
" Map <F4> to insert Date stamp in insert mode
inoremap <F4> <C-R>=strftime("==== %m/%d/%Y ====\n")<CR>
" Map <F6> to insert images string in insert mode
inoremap <F6> <C-R>=strftime("files/%Y_%m_%d_img")<CR>

" Map leader
let mapleader = ","

" Map for cut and paste
" Use C-Q to do what C-V normally do. Note: no recursive map here
noremap <C-Q> <C-V>
" Map C-V recursively
map <C-V> "+gP
cmap <C-V> <C-R>+
vnoremap <C-X> "+x
vnoremap <C-C> "+y

" Do not use bash ctrl-j
let g:BASH_Ctrl_j='off'
let g:C_Ctrl_j='off'
nnoremap <C-j>     <C-W>j
nnoremap <C-k>     <C-W>k
nnoremap <C-h>     <C-W>h
nnoremap <C-l>     <C-W>l

"" Fugitive plugin
cnoreabbrev Gs Gstatus
if has("autocmd")
    autocmd BufReadPost fugitive://* set bufhidden=delete
endif

" EnhancedCommentify plugin
let g:EnhCommentifyRespectIndent = 'yes'
let g:EnhCommentifyPretty = 'yes'
let g:EnhCommentifyAlignRight = 'yes'
let g:EnhCommentifyUseAltKeys = 'no'
let g:EnhCommentifyUseBlockIndent = 'yes'

" Vim-arline
let g:airline_powerline_fonts = 1
let g:airline_solarized_bg = 'dark'
" Enable tab line
let g:airline#extensions#tabline#enabled = 1
" Set the tab number to show actual number, instead of # of splits
let g:airline#extensions#tabline#tab_nr_type = 1 " tab number
" Hide the tab type
let g:airline#extensions#tabline#show_tab_type = 0
" Format buffer filenames
let g:airline#extensions#tabline#fnamemod = ':t'
" Show the buffer number
let g:airline#extensions#tabline#buffer_nr_show = 1
" Eliminate the space between buffer number
let g:airline#extensions#tabline#buffer_nr_format = '%s:'
" Collapse path for long filename
let g:airline#extensions#tabline#fnamecollapse=1
" Set min buffers to start showing tabline
let g:airline#extensions#tabline#buffer_min_count = 2
" Use the `unique_tail` (or `unique_tail_improved` algorithm to display buffer
let g:airline#extensions#tabline#formatter = 'unique_tail_improved'
" Configure symbols
let g:airline_symbols = get(g:,'airline_symbols',{})
let g:airline_symbols.maxlinenr= ''

" === Denite setup ==="
" Wrap in try/catch to avoid errors on initial install before plugin is available
try

"" Mappings for Denite buffer actions
autocmd FileType denite call s:denite_my_settings()
function! s:denite_my_settings() abort
    " Window
    setlocal signcolumn=no cursorline

    nnoremap <silent><buffer><expr> <CR>
    \ denite#do_map('do_action')
    nnoremap <silent><buffer><expr> d
    \ denite#do_map('do_action', 'delete')
    nnoremap <silent><buffer><expr> p
    \ denite#do_map('do_action', 'preview')
    nnoremap <silent><buffer><expr> q
    \ denite#do_map('quit')
    nnoremap <silent><buffer><expr> i
    \ denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> <Space>
    \ denite#do_map('toggle_select').'j'
endfunction

"" In filter mode and want to go back
autocmd FileType denite-filter call s:denite_filter_my_settings()
function! s:denite_filter_my_settings() abort
  imap <silent><buffer> <C-o> <Plug>(denite_filter_quit)
endfunction

"" Change file/rec command
call denite#custom#var('file/rec', 'command', ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])

"" Ag command on grep source
call denite#custom#var('grep', {
    \ 'command': ['ag'],
    \ 'default_opts': ['-i', '--vimgrep'],
    \ 'recursive_opts': [],
    \ 'pattern_opt': [],
    \ 'separator': ['--'],
    \ 'final_opts': [],
    \ })

" Custom options for Denite
"   auto_resize             - Auto resize the Denite window height automatically.
"   prompt                  - Customize denite prompt
"   direction               - Specify Denite window direction as directly below current pane
"   winminheight            - Specify min height for Denite window
"   highlight_mode_insert   - Specify h1-CursorLine in insert mode
"   prompt_highlight        - Specify color of prompt
"   highlight_matched_char  - Matched characters highlight
"   highlight_matched_range - matched range highlight
" \ 'split': 'floating',    - Denite buffer to float
" \ 'winrow': 1,            - Pin to top
" \ 'auto_resize': 1,       
" \ 'source_names': 'short',
" \ 'highlight_matched_range': 'Visual',
" \ 'highlight_window_background': 'Visual',
" \ 'highlight_filter_background': 'DiffAdd',
" \ 'highlight_matched_char': 'Underlined',
" \ 'vertical_preview': 1
if has('nvim')
    let s:denite_options = {'default' : {
    \ 'split': 'floating',     
    \ 'winrow': 1,             
    \ 'auto_resize': 1,       
    \ 'prompt': 'λ ',
    \ 'source_names': 'short',
    \ 'highlight_matched_range': 'Visual',
    \ 'vertical_preview': 1,
    \ 'highlight_window_background': 'Visual',
    \ 'highlight_filter_background': 'DiffAdd',
    \ }}
else
    let s:denite_options = {'default' : {
    \ 'prompt': 'λ ',
    \ 'highlight_matched_char': 'Underlined',
    \ 'highlight_matched_range': 'SpellBad',
    \ }}
endif


" Loop through denite options and enable them
function! s:profile(opts) abort
  for l:fname in keys(a:opts)
    for l:dopt in keys(a:opts[l:fname])
      call denite#custom#option(l:fname, l:dopt, a:opts[l:fname][l:dopt])
    endfor
  endfor
endfunction

call s:profile(s:denite_options)
catch
  echo 'Denite not installed. It should work after running :PlugInstall'
endtry

nnoremap <C-p> :Denite -start-filter file/rec<CR>
nnoremap <leader>db :Denite buffer<CR>

" Map for tab close
nmap gc :tabclose<CR>
nmap gn :tabnew<CR>
" Go to last active tab
au TabLeave * let g:lasttab = tabpagenr()
nnoremap <silent> gl :exe "tabn ".g:lasttab<cr>

" Gitv plugin
nmap <leader>gv :Gitv --all<cr>
nmap <leader>gV :Gitv! --all<cr>
vmap <leader>gV :Gitv! --all<cr>
let g:Gitv_DoNotMapCtrlKey = 1
" Remap back some ctrl key
au FileType gitv nmap <buffer> <silent> J <Plug>(gitv-previous-commit)
au FileType gitv nmap <buffer> <silent> K <Plug>(gitv-next-commit)

""" Autopairs """
let g:AutoPairsShortcutJump = '<C-g>' 
" Do not map <BS> and <C-h>, will interfere w/ NeoComplete
" let g:AutoPairsMapBS = 0 
" let g:AutoPairsMapCh = 0

" Use mouse in terminal vim
set mouse=a
